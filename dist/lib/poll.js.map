{"version":3,"sources":["../../src/lib/poll.js"],"names":[],"mappings":";;;;AAAA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,aAAa,QAAQ,YAAR,CAAnB;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;;AAEA,IAAM,MAAM,SAAN,GAAM;AAAA,SAAO,GAAG,UAAH,CAAc,MAAd,CAAqB,aAAK;AAC3C,YAAQ,GAAR,EAAa,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAC/B,UAAI,OAAO,IAAI,UAAJ,KAAmB,GAA9B,EAAmC,EAAE,OAAF,CAAU,OAAO,GAAjB;AACnC,QAAE,MAAF,CAAS,IAAT;AACA,QAAE,WAAF;AACD,KAJD;AAKD,GANkB,CAAP;AAAA,CAAZ;;AAQA,SAAS,KAAT,CAAgB,GAAhB,EAAqB;AACnB,SAAO,GAAG,UAAH,CAAc,MAAd,CAAqB,aAAK;AAC/B,QAAM,SAAS,EAAf;AACA,QAAM,aAAa,IAAI,UAAJ,EAAnB;AACA,eAAW,KAAX,CAAiB,GAAjB;AACA,eAAW,GAAX;AACA,eAAW,EAAX,CAAc,OAAd,EAAuB;AAAA,aAAO,EAAE,OAAF,CAAU,GAAV,CAAP;AAAA,KAAvB;AACA,eAAW,EAAX,CAAc,MAAd,EAAsB;AAAA,aAAQ,OAAO,IAAP,CAAY,IAAZ,CAAR;AAAA,KAAtB;AACA,eAAW,EAAX,CAAc,KAAd,EAAqB,YAAY;AAC/B,QAAE,MAAF,CAAS,CAAC,MAAD,EAAS,KAAK,IAAd,CAAT;AACA,QAAE,WAAF;AACD,KAHD;AAID,GAXM,CAAP;AAYD;;AAED,OAAO,OAAP,GACE,SAAS,IAAT,CAAe,GAAf,EAAoB,OAApB,EAA6B;AAC3B,SACE,IAAI,GAAJ,EACG,OADH,CACW,KADX,EAEG,GAFH,CAEO;AAAA;;AAAA,QAAE,MAAF;AAAA,QAAU,IAAV;AAAA,WAAoB,CACvB,OACG,MADH,CACU;AAAA,UAAG,KAAH,SAAG,KAAH;AAAA,aACN,QAAQ,MAAR,CAAe;AAAA;;AAAA,YAAE,OAAF;AAAA,YAAW,IAAX;AAAA,eACb,OACI,MAAM,OAAN,CAAc,OAAd,MAA2B,CAAC,C;AADhC,UAEI,MAAM,OAAN,CAAc,OAAd,IAAyB,CAAC,CAHjB;AAAA,O;AAAf,QAIE,MAJF,KAIa,CALP;AAAA,KADV,CADuB,EASvB,IATuB,CAApB;AAAA,GAFP,EAaG,GAbH,CAaO;AAAA;;AAAA,QAAE,MAAF;AAAA,QAAU,IAAV;AAAA,WAAqB;AACxB,YAAM,KAAK,KADa;AAExB,mBAAa,OAAO,CAAP,EAAU,KAFC;AAGxB,kBAAY,OAAO,CAAP,EAAU;AAHE,KAArB;AAAA,GAbP,CADF;AAoBD,CAtBH","file":"poll.js","sourcesContent":["const request = require('request')\nconst Feedparser = require('feedparser')\nconst Rx = require('rx')\n\nconst get = url => Rx.Observable.create(o => {\n  request(url, (err, res, body) => {\n    if (err || res.statusCode !== 200) o.onError(err || res)\n    o.onNext(body)\n    o.onCompleted()\n  })\n})\n\nfunction parse (xml) {\n  return Rx.Observable.create(o => {\n    const stream = []\n    const feedparser = new Feedparser()\n    feedparser.write(xml)\n    feedparser.end()\n    feedparser.on('error', err => o.onError(err))\n    feedparser.on('data', data => stream.push(data))\n    feedparser.on('end', function () {\n      o.onNext([stream, this.meta])\n      o.onCompleted()\n    })\n  })\n}\n\nmodule.exports =\n  function poll (url, filters) {\n    return (\n      get(url)\n        .flatMap(parse)\n        .map(([stream, meta]) => [\n          stream\n            .filter(({ title }) =>\n              filters.filter(([keyword, kind]) =>\n                kind\n                  ? title.indexOf(keyword) === -1 // When the kind is true and it's not in the title\n                  : title.indexOf(keyword) > -1 // When the kind is false and it's inside the title\n              ).length === 0\n            ),\n          meta\n        ])\n        .map(([stream, meta]) => ({\n          blog: meta.title,\n          latestTitle: stream[0].title,\n          latestLink: stream[0].link\n        }))\n    )\n  }\n\n"]}