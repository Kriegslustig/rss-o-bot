{"version":3,"sources":["../../src/lib/store.js"],"names":[],"mappings":"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","file":"store.js","sourcesContent":["const {getTime} = require('./helpers.js')\n\nconst Rx = require('rx')\nconst O = Rx.Observable\nconst Sequelize = require('sequelize')\n\nconst genInsertFeed = (Feed, Filter) => (url, filters) =>\n  O.fromPromise(Feed.create(\n    {\n      url,\n      addded: getTime(),\n      lastCheck: 0\n    }\n  ))\n  .flatMap(feed =>\n    O.forkJoin(filters.map(f => Filter.create(f)))\n      .flatMap(filters => O.fromPromise(feed.addFilters(filters)))\n  )\n\n// TODO: Data races have been prevented.\n// The updaterId is for reference inside the next select query\n// Now the problem is, that the load isn't evenly spread between\n// threads. To implement that, I'd have to do a findOne using\n// The same where clause, as here, try updating the element and\n// still use that same where clause in that query. Then use a\n// retryWhen operator to repeat the whole process if the update\n// query didn't affect any elements.\nconst genGetFeeds = (Feed, interval) => () => {\n  const updaterId = Math.round(Math.random() * 1000000000000)\n  return O.fromPromise(\n    Feed.update(\n      { lastCheck: getTime(), updaterId },\n      { where: { lastCheck: { $lt: getTime(interval * -1) } } }\n    )\n      .then(() => Feed.findAll({\n        where: { updaterId }\n      }))\n  )\n}\n\nconst genUpdateLatestLink = Feed => (id, latestLink) =>\n  O.fromPromise(Feed.update(\n    { latestLink },\n    { where: { id } }\n  ))\n\nconst genRemoveFeed = Feed => id => O.fromPromise(\n  Feed.findById(id)\n    .then(feed => feed.getFilters())\n    .then(filters => Promise.all(\n      filters.map(filter => filter.destroy)\n    ))\n    .then(() => Feed.destroy({ where: { id } }))\n)\n\nconst genListFeeds = Feed => () => O.fromPromise(Feed.findAll())\n\nmodule.exports = function initStore (config) {\n  const sequelize = new Sequelize(\n    config.name,\n    config.username,\n    config.password,\n    Object.assign({\n      logging: () => {}\n    }, config.database.options)\n  )\n  const Feed = sequelize.define('feed', {\n    url: Sequelize.STRING,\n    added: Sequelize.INTEGER,\n    lastCheck: Sequelize.INTEGER,\n    latestLink: Sequelize.STRING,\n    updaterId: Sequelize.STRING\n  })\n  const Filter = sequelize.define('filter', {\n    keyword: Sequelize.STRING,\n    kind: Sequelize.BOOLEAN\n  })\n  Feed.hasMany(Filter)\n\n  return (\n    O.fromPromise(sequelize.sync())\n      .map(() => ({\n        _Feed: Feed,\n        _Filter: Filter,\n        insertFeed: genInsertFeed(Feed, Filter),\n        getFeeds: genGetFeeds(Feed, config.interval),\n        updateLatestLink: genUpdateLatestLink(Feed),\n        removeFeed: genRemoveFeed(Feed),\n        listFeeds: genListFeeds(Feed)\n      }))\n  )\n}\n\n"]}