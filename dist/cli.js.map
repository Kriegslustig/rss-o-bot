{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;;;;;AAEA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,IAAI,GAAG,UAAb;;eACuC,QAAQ,eAAR,C;;IAA/B,S,YAAA,S;IAAW,e,YAAA,e;;AACnB,IAAM,KAAK,QAAQ,SAAR,CAAX;AACA,IAAM,SAAS,WAAf;AACA,IAAM,YAAY,QAAQ,aAAR,CAAlB;AACA,IAAM,SAAS,QAAQ,cAAR,EAAwB,MAAxB,CAAf;;AAEA,IAAM,6wCAAN;;AA4BA,IAAM,SAAS,QAAQ,IAAR,CAAa,CAAb,CAAf;AACA,IAAM,OAAO,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAb;;AAEA,IAAI,WAAW,KAAX,IAAoB,KAAK,CAAL,CAAxB,EAAiC;AAAA;AAAA,yBACL,IADK;;AAAA,QACxB,GADwB;;AAAA,QAChB,OADgB;;AAE/B,cAAU,MAAV,EACG,OADH,CACW;AAAA,UAAG,UAAH,QAAG,UAAH;AAAA,aAAoB,WAAW,GAAX,EAAgB,QAAQ,GAAR,CAAY,eAAZ,CAAhB,CAApB;AAAA,KADX,EAEG,SAFH,CAEa,QAAQ,GAFrB,EAE0B,QAAQ,KAFlC,EAEyC;AAAA,aAAM,QAAQ,IAAR,EAAN;AAAA,KAFzC;AAF+B;AAKhC,CALD,MAKO,IAAI,WAAW,IAAX,IAAmB,KAAK,CAAL,CAAvB,EAAgC;AAAA;AAAA,gCACxB,IADwB;;AAAA,QAC9B,EAD8B;;AAErC,cAAU,MAAV,EACG,OADH,CACW;AAAA,UAAG,UAAH,SAAG,UAAH;AAAA,aAAoB,WAAW,EAAX,CAApB;AAAA,KADX,EAEG,SAFH,CAEa,QAAQ,GAFrB,EAE0B,QAAQ,KAFlC,EAEyC;AAAA,aAAM,QAAQ,IAAR,EAAN;AAAA,KAFzC;AAFqC;AAKtC,CALM,MAKA,IAAI,WAAW,MAAf,EAAuB;AAC5B,YAAU,MAAV,EACG,OADH,CACW;AAAA,QAAG,SAAH,SAAG,SAAH;AAAA,WAAmB,WAAnB;AAAA,GADX,EAEG,OAFH,CAEW;AAAA,WACP,EAAE,QAAF,CAAW,MAAM,GAAN,CAAU;AAAA,aAAK,EAAE,UAAF,EAAL;AAAA,KAAV,CAAX,EACG,GADH,CACO,UAAC,OAAD;AAAA,aAAa,MAAM,GAAN,CAAU,UAAC,CAAD,EAAI,CAAJ;AAAA,gBACzB,EAAE,GAAF,CAAM,IAAN,CADyB,EACZ,EAAE,GAAF,CAAM,KAAN,CADY,4BACK,QAAQ,CAAR,EAAW,GAAX,CAAe;AAAA,iBAAU,CAAC,OAAO,GAAP,CAAW,SAAX,CAAD,EAAwB,OAAO,GAAP,CAAW,MAAX,CAAxB,CAAV;AAAA,SAAf,CADL;AAAA,OAAV,CAAb;AAAA,KADP,CADO;AAAA,GAFX,EAQG,SARH,CAQa,QAAQ,GARrB,EAQ0B,QAAQ,KARlC,EAQyC;AAAA,WAAM,QAAQ,IAAR,EAAN;AAAA,GARzC;AASD,CAVM,MAUA,IAAI,WAAW,mBAAX,IAAkC,KAAK,CAAL,CAAtC,EAA+C;AAAA,8BACtC,IADsC;;AAAA,MAC7C,IAD6C;;AAEpD,SAAO,MAAP,EAAe,IAAf,EACG,SADH,CACa,QAAQ,GADrB,EAC0B,QAAQ,KADlC,EACyC;AAAA,WAAM,QAAQ,IAAR,EAAN;AAAA,GADzC;AAED,CAJM,MAIA,IAAI,WAAW,eAAf,EAAgC;AAAA;AACrC,QAAM,KAAK,GAAG,OAAO,oBAAP,CAAH,CAAX;AACA,MAAE,QAAF,CAAW,IAAX,EAAiB,SAAjB,CAA2B,CAA3B,EACG,OADH,CACW;AAAA,aAAM,EAAE,WAAF,CAAc,GAAG,UAAH,EAAd,CAAN;AAAA,KADX,EAEG,GAFH,CAEO;AAAA,aAAO,IAAI,IAAJ,CAAS,EAAT,GACR,IAAI,IAAJ,CAAS,MAAT,CAAgB,KAAhB,CAAsB,CAAC,CAAvB,EAA0B,CAA1B,CADQ,GAER,IAFC;AAAA,KAFP,EAMG,oBANH,CAMwB;AAAA,aAAU,SAAS,OAAO,SAAhB,GAA4B,IAAtC;AAAA,KANxB,EAOG,GAPH,CAOO;AAAA,aAAU,SAAS,OAAO,OAAP,CAAe,IAAf,CAAoB,EAA7B,GAAkC,IAA5C;AAAA,KAPP,EAQG,SARH,CAQa,QAAQ,GARrB,EAQ0B,QAAQ,KARlC,EAQyC;AAAA,aAAM,QAAQ,IAAR,EAAN;AAAA,KARzC;AAFqC;AAWtC,CAXM,MAWA,IAAI,WAAW,KAAf,EAAsB;AAC3B,UAAQ,GAAR;AACD,CAFM,MAEA,IAAI,WAAW,IAAX,IAAmB,WAAW,QAA9B,IAA0C,WAAW,MAAzD,EAAiE;AACtE,UAAQ,MAAR,CAAe,KAAf,CAAqB,IAArB;AACD,CAFM,MAEA;AACL,UAAQ,MAAR,CAAe,KAAf,2BAA6C,MAA7C,WAAyD,IAAzD;AACA,UAAQ,IAAR,CAAa,CAAb;AACD","file":"cli.js","sourcesContent":["\n\nconst Rx = require('rx')\nconst O = Rx.Observable\nconst { getConfig, transformFilter } = require('./lib/helpers')\nconst Tg = require('tg-yarl')\nconst config = getConfig()\nconst initStore = require('./lib/store')\nconst notify = require('./lib/notify')(config)\n\nconst help = `usage: rss-o-bot [flag | action [arguments]]\n\nFlags:\n  -h, --help             Displays this dialogue\n\nActions:\n  run                    Run the deamon process in the foreground\n  add url [...filters]   Add a Feed-URL to the database\n  rm id                  Remove a Feed-URL from the database\n  list                   List all Feed-URLs\n  test-notification      Send a test notification over the\n                         channels defined in config.json\n  poll-telegram          Continuously checks telegram for new\n                         messages and outputs senders userIds.\n\nArguments:\n  url                    A URL of an RSS or Atom feed\n  id                     The \\`id\\` of a Feed-URL inside the DB.\n                         \\`id\\`s can be displayed using \\`rss-o-bot list\\`\n  ...                    A space sperated list of something\n  filters                Keywords to search for in titles of items inside\n                         feeds. When filters are passed, only notifications\n                         for items containing that word in their title\n                         will be sent. If a filter is prefixed with '!',\n                         you will only be notified about items without\n                         that word in their titles.\n`\n\nconst action = process.argv[2]\nconst args = process.argv.slice(3)\n\nif (action === 'add' && args[0]) {\n  const [url, ...filters] = args\n  initStore(config)\n    .flatMap(({ insertFeed }) => insertFeed(url, filters.map(transformFilter)))\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'rm' && args[0]) {\n  const [id] = args\n  initStore(config)\n    .flatMap(({ removeFeed }) => removeFeed(id))\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'list') {\n  initStore(config)\n    .flatMap(({ listFeeds }) => listFeeds())\n    .flatMap(feeds =>\n      O.forkJoin(feeds.map(f => f.getFilters()))\n        .map((filters) => feeds.map((f, i) =>\n          [f.get('id'), f.get('url'), ...filters[i].map(filter => [filter.get('keyword'), filter.get('kind')])]\n        ))\n    )\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'test-notification' && args[0]) {\n  const [url] = args\n  notify('Test', url)\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'poll-telegram') {\n  const tg = Tg(config['telegram-api-token'])\n  O.interval(1000).startWith(0)\n    .flatMap(() => O.fromPromise(tg.getUpdates()))\n    .map(res => res.body.ok\n      ? res.body.result.slice(-1)[0]\n      : null\n    )\n    .distinctUntilChanged(update => update ? update.update_id : null)\n    .map(update => update ? update.message.from.id : null)\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'run') {\n  require('.')\n} else if (action === '-h' && action === '--help' && action === 'help') {\n  process.stdout.write(help)\n} else {\n  process.stderr.write(`Unrecognized action: ${action}\\n ${help}`)\n  process.exit(1)\n}\n\n"]}