{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;;;AAEA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,IAAI,GAAG,UAAb;;eACuC,QAAQ,eAAR,C;;IAA/B,S,YAAA,S;IAAW,e,YAAA,e;;AACnB,IAAM,KAAK,QAAQ,SAAR,CAAX;AACA,IAAM,SAAS,WAAf;AACA,IAAM,YAAY,QAAQ,aAAR,CAAlB;AACA,IAAM,SAAS,QAAQ,cAAR,EAAwB,MAAxB,CAAf;AACA,IAAM,OAAO,QAAQ,YAAR,CAAb;;AAEA,IAAM,u7DAAN;;AA+CA,IAAM,SAAS,QAAQ,IAAR,CAAa,CAAb,CAAf;AACA,IAAM,OAAO,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAb;;AAEA,IAAI,WAAW,KAAX,IAAoB,KAAK,CAAL,CAAxB,EAAiC;AAAA;AAAA,yBACL,IADK;;AAAA,QACxB,GADwB;;AAAA,QAChB,OADgB;;AAE/B,cAAU,MAAV,EACG,OADH,CACW;AAAA,UAAG,UAAH,QAAG,UAAH;AAAA,aAAoB,WAAW,GAAX,EAAgB,QAAQ,GAAR,CAAY,eAAZ,CAAhB,CAApB;AAAA,KADX,EAEG,SAFH,CAGI;AAAA,aAAK,QAAQ,GAAR,YAAqB,EAAE,GAAF,CAAM,KAAN,CAArB,CAAL;AAAA,KAHJ,EAII,QAAQ,KAJZ,EAKI;AAAA,aAAM,QAAQ,IAAR,EAAN;AAAA,KALJ;AAF+B;AAShC,CATD,MASO,IAAI,WAAW,IAAX,IAAmB,KAAK,CAAL,CAAvB,EAAgC;AAAA;AAAA,gCACxB,IADwB;;AAAA,QAC9B,EAD8B;;AAErC,cAAU,MAAV,EACG,OADH,CACW;AAAA,UAAG,UAAH,SAAG,UAAH;AAAA,aAAoB,WAAW,EAAX,CAApB;AAAA,KADX,EAEG,SAFH,CAGI;AAAA,aAAM,QAAQ,GAAR,CAAY,UAAZ,CAAN;AAAA,KAHJ,EAII,QAAQ,KAJZ,EAKI;AAAA,aAAM,QAAQ,IAAR,EAAN;AAAA,KALJ;AAFqC;AAQtC,CARM,MAQA,IAAI,WAAW,MAAf,EAAuB;AAC5B,YAAU,MAAV,EACG,OADH,CACW;AAAA,QAAG,SAAH,SAAG,SAAH;AAAA,WAAmB,WAAnB;AAAA,GADX,EAEG,SAFH,CAGI,UAHJ,EAII,QAAQ,KAJZ;AAMD,CAPM,MAOA,IAAI,WAAW,mBAAf,EAAoC;AACzC,MAAM,OAAM,KAAK,CAAL,KAAW,MAAvB;AACA,SAAO,MAAP,EAAe,IAAf,EACG,SADH,CACa,QAAQ,GADrB,EAC0B,QAAQ,KADlC,EACyC;AAAA,WAAM,QAAQ,IAAR,EAAN;AAAA,GADzC;AAED,CAJM,MAIA,IAAI,WAAW,eAAf,EAAgC;AAAA;AACrC,QAAM,KAAK,GAAG,OAAO,oBAAP,CAAH,CAAX;AACA,MAAE,QAAF,CAAW,IAAX,EAAiB,SAAjB,CAA2B,CAA3B,EACG,OADH,CACW;AAAA,aAAM,EAAE,WAAF,CAAc,GAAG,UAAH,EAAd,CAAN;AAAA,KADX,EAEG,GAFH,CAEO;AAAA,aAAO,IAAI,IAAJ,CAAS,EAAT,GACR,IAAI,IAAJ,CAAS,MAAT,CAAgB,KAAhB,CAAsB,CAAC,CAAvB,EAA0B,CAA1B,CADQ,GAER,IAFC;AAAA,KAFP,EAMG,oBANH,CAMwB;AAAA,aAAU,SAAS,OAAO,SAAhB,GAA4B,IAAtC;AAAA,KANxB,EAOG,GAPH,CAOO;AAAA,aAAU,SAAS,OAAO,OAAP,CAAe,IAAf,CAAoB,EAA7B,GAAkC,IAA5C;AAAA,KAPP,EAQG,SARH,CAQa,QAAQ,GARrB,EAQ0B,QAAQ,KARlC,EAQyC;AAAA,aAAM,QAAQ,IAAR,EAAN;AAAA,KARzC;AAFqC;AAWtC,CAXM,MAWA,IAAI,WAAW,QAAX,IAAuB,KAAK,CAAL,CAA3B,EAAoC;AAAA,8BAC1B,IAD0B;;AAAA,MAClC,IADkC;;AAEzC,YAAU,MAAV,EACG,OADH,CACW,KAAK,MAAL,CAAY,IAAZ,CADX,EAEG,SAFH,CAGI,UAHJ,EAII,QAAQ,KAJZ;AAMD,CARM,MAQA,IAAI,WAAW,QAAf,EAAyB;AAC9B,YAAU,MAAV,EACG,OADH,CACW,KAAK,MADhB,EAEG,SAFH,CAGI,QAAQ,GAHZ,EAII,QAAQ,KAJZ;AAMD,CAPM,MAOA,IAAI,WAAW,KAAX,IAAoB,CAAC,MAAzB,EAAiC;AACtC,UAAQ,GAAR;AACD,CAFM,MAEA,IAAI,WAAW,IAAX,IAAmB,WAAW,QAA9B,IAA0C,WAAW,MAAzD,EAAiE;AACtE,UAAQ,MAAR,CAAe,KAAf,CAAqB,IAArB;AACD,CAFM,MAEA;AACL,UAAQ,MAAR,CAAe,KAAf,2BAA6C,MAA7C,WAAyD,IAAzD;AACA,UAAQ,IAAR,CAAa,CAAb;AACD;;AAED,SAAS,UAAT,CAAqB,KAArB,EAA4B;AAC1B,UAAQ,GAAR,CACE,MAAM,GAAN,CAAU;AAAA,WAAQ,KAAK,UAAL,GACf,IADe,CACV;AAAA,aAAW,CACf,KAAK,GAAL,CAAS,IAAT,CADe,EAEf,KAAK,GAAL,CAAS,KAAT,CAFe,EAGf,QAAQ,GAAR,CAAY;AAAA,eACV,EAAE,GAAF,CAAM,MAAN,IACI,EAAE,GAAF,CAAM,SAAN,CADJ,SAEQ,EAAE,GAAF,CAAM,SAAN,CAHE;AAAA,OAAZ,EAIE,IAJF,CAIO,IAJP,CAHe,CAAX;AAAA,KADU,CAAR;AAAA,GAAV,CADF,EAaG,IAbH,CAaQ,iBAAS;AACb,UAAM,OAAN,CAAc,iBAAwB;AAAA;;AAAA,UAAtB,EAAsB;AAAA,UAAlB,GAAkB;AAAA,UAAb,OAAa;;AACpC,cAAQ,MAAR,CAAe,KAAf,CAAwB,EAAxB,UAA+B,GAA/B,UAAuC,OAAvC;AACD,KAFD;AAGA,YAAQ,MAAR,CAAe,KAAf;AACD,GAlBH;AAmBD","file":"cli.js","sourcesContent":["\n\nconst Rx = require('rx')\nconst O = Rx.Observable\nconst { getConfig, transformFilter } = require('./lib/helpers')\nconst Tg = require('tg-yarl')\nconst config = getConfig()\nconst initStore = require('./lib/store')\nconst notify = require('./lib/notify')(config)\nconst opml = require('./lib/opml')\n\nconst help = `usage: rss-o-bot [flag | action [arguments]]\n\nFlags:\n  -h, --help                Displays this dialogue\n\nActions:\n  [run]                     Run the deamon process in the foreground\n\n  add url [...filters]      Add a Feed-URL to the database\n\n  rm id                     Remove a Feed-URL from the database\n\n  list                      List all Feed-URLs\n\n  test-notification [url]   Send a test notification over the\n\n                            channels defined in config.json\n  poll-telegram             Continuously checks telegram for new\n                            messages and outputs senders userIds.\n\n  import file               OPML import. Takes a path to an XML-file\n                            As a parameter and scanns it for outline\n                            elements. It's standard for RSS clients\n                            to provide an OPML import. These contain\n                            outline tags which the importer searches\n                            for. From those tags, the xmlUrl or Url\n                            Attributes are read as feed-URLs>\n\n  export                    Exports the RSS feeds as OPML. This does\n                            not export the filters.\n\nArguments:\n  url                       A URL of an RSS or Atom feed\n\n  id                        The \\`id\\` of a Feed-URL inside the DB.\n                            \\`id\\`s can be displayed using \\`rss-o-bot list\\`\n\n  ...                       A space sperated list of something\n\n  filters                   Keywords to search for in titles of items inside\n                            feeds. When filters are passed, only notifications\n                            for items containing that word in their title\n                            will be sent. If a filter is prefixed with '!',\n                            you will only be notified about items without\n                            that word in their titles.\n`\n\nconst action = process.argv[2]\nconst args = process.argv.slice(3)\n\nif (action === 'add' && args[0]) {\n  const [url, ...filters] = args\n  initStore(config)\n    .flatMap(({ insertFeed }) => insertFeed(url, filters.map(transformFilter)))\n    .subscribe(\n      f => console.log(`Added ${f.get('url')}`),\n      console.error,\n      () => process.exit()\n    )\n} else if (action === 'rm' && args[0]) {\n  const [id] = args\n  initStore(config)\n    .flatMap(({ removeFeed }) => removeFeed(id))\n    .subscribe(\n      () => console.log('Removed.'),\n      console.error,\n      () => process.exit())\n} else if (action === 'list') {\n  initStore(config)\n    .flatMap(({ listFeeds }) => listFeeds())\n    .subscribe(\n      printFeeds,\n      console.error\n    )\n} else if (action === 'test-notification') {\n  const url = args[0] || 'test'\n  notify('Test', url)\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'poll-telegram') {\n  const tg = Tg(config['telegram-api-token'])\n  O.interval(1000).startWith(0)\n    .flatMap(() => O.fromPromise(tg.getUpdates()))\n    .map(res => res.body.ok\n      ? res.body.result.slice(-1)[0]\n      : null\n    )\n    .distinctUntilChanged(update => update ? update.update_id : null)\n    .map(update => update ? update.message.from.id : null)\n    .subscribe(console.log, console.error, () => process.exit())\n} else if (action === 'import' && args[0]) {\n  const [file] = args\n  initStore(config)\n    .flatMap(opml.import(file))\n    .subscribe(\n      printFeeds,\n      console.error\n    )\n} else if (action === 'export') {\n  initStore(config)\n    .flatMap(opml.export)\n    .subscribe(\n      console.log,\n      console.error\n    )\n} else if (action === 'run' || !action) {\n  require('.')\n} else if (action === '-h' && action === '--help' && action === 'help') {\n  process.stdout.write(help)\n} else {\n  process.stderr.write(`Unrecognized action: ${action}\\n ${help}`)\n  process.exit(1)\n}\n\nfunction printFeeds (feeds) {\n  Promise.all(\n    feeds.map(feed => feed.getFilters()\n      .then(filters => [\n        feed.get('id'),\n        feed.get('url'),\n        filters.map(f =>\n          f.get('kind')\n            ? f.get('keyword')\n            : `!${f.get('keyword')}`\n        ).join(', ')\n      ])\n    )\n  )\n    .then(feeds => {\n      feeds.forEach(([id, url, filters]) => {\n        process.stdout.write(`${id}: ${url}  ${filters}\\n`)\n      })\n      process.stdout.write(`\\n`)\n    })\n}\n\n"]}